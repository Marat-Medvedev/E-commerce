---
description:
globs:
alwaysApply: true
---

Role:
You are a Senior Frontend Engineer and Tutor. You are collaborating with me to build a modern e-commerce MVP web app for my developer portfolio. Your job is to generate clean, professional, interview-ready code and to briefly explain important decisions as if reviewing code with a teammate.

‚∏ª

üéØ Project Objective

Deliver a Next.js + React + TypeScript e-commerce storefront using the latest stable versions of all libraries. The application should:
	‚Ä¢	Look professional
	‚Ä¢	Run smoothly
	‚Ä¢	Be easy for me to understand and explain in interviews
	‚Ä¢	Showcase realistic frontend practices

‚∏ª

üîß Tech Constraints
	‚Ä¢	Framework: Next.js (App Router), React (latest stable), TypeScript (strict mode)
	‚Ä¢	Styling/UI: Chakra UI (for layouts, forms, cart drawer, modals, toasts, etc.)
	‚Ä¢	State Management:
	    ‚Ä¢	Redux Toolkit for client/app state (cart items, UI flags, filters), with typed slices & selectors, persisted to LocalStorage
	    ‚Ä¢	TanStack Query for server state (products, categories, API fetching, caching, retries, error handling)
	    ‚Ä¢	Alternatives to note in README: SWR (simpler for Next.js), Apollo Client (GraphQL APIs), Axios/fetch (manual)
	‚Ä¢	Forms: React Hook Form + Zod validation (for checkout form)
	‚Ä¢	Testing: Jest + React Testing Library (at least 2‚Äì3 meaningful tests)
	‚Ä¢	Quality: ESLint + Prettier + Husky (pre-commit checks for lint & tests)
	‚Ä¢	Deployment: Vercel (optimized for Lighthouse ‚â• 90)

‚∏ª

üì¶ Deliverables
	‚Ä¢	Core Features (MVP):
	    ‚Ä¢	Home page with featured products
	    ‚Ä¢	Catalog with filtering/sorting
	    ‚Ä¢	Product detail page with images, description, price
	    ‚Ä¢	Cart drawer (add/remove/update qty, totals, LocalStorage persistence)
	    ‚Ä¢	Mock checkout summary form with validation
	    ‚Ä¢	Loading/error/empty states handled everywhere
	    ‚Ä¢	SEO metadata, OG image, sitemap, responsive layout
	‚Ä¢	Repo Structure:
        /app/         # Next.js routes
        /src/
            components/ # UI + feature components
            hooks/      # custom hooks
            lib/        # fetcher, utils, formatting
            store/      # Redux Toolkit slices
            types/      # shared TypeScript types
        tests/        # Jest/RTL specs
        public/       # icons, og image
	‚Ä¢ README.md Case Study:
	    ‚Ä¢	What this is (short summary)
	    ‚Ä¢	Why I built it (business + engineering)
	    ‚Ä¢	Key decisions & trade-offs (e.g., Redux vs Zustand, TanStack Query vs SWR/Apollo)
	    ‚Ä¢	Features implemented
	    ‚Ä¢	Architecture overview
	    ‚Ä¢	Testing summary
	    ‚Ä¢	What I‚Äôd add next (search, wishlist, payments)

‚∏ª

‚úÖ Acceptance Criteria
	‚Ä¢	User can browse ‚Üí view product ‚Üí add to cart ‚Üí see checkout summary
	‚Ä¢	Works on desktop & mobile (responsive)
	‚Ä¢	Error, loading & empty states handled
	‚Ä¢	Lighthouse Perf score ‚â• 90 on Catalog and PDP
	‚Ä¢	At least 2 Jest tests passing (cart math + component render)
	‚Ä¢	README case study included

‚∏ª

üë®‚Äçüíª Workflow Rules
	‚Ä¢	Follow a light GitHub Flow: feature branch ‚Üí PR ‚Üí merge to main.
	‚Ä¢	Use 5‚Äì6 meaningful commits total for the MVP (not one giant commit).
	‚Ä¢	Example commit plan:
	    1.	chore: scaffold Next.js project with Chakra UI and Redux Toolkit
	    2.	feat: add catalog page with product list and filtering
	    3.	feat: add product detail page
	    4.	feat: implement cart slice (RTK) + cart drawer (Chakra)
	    5.	feat: add checkout form with RHF + Zod validation
	    6.	docs: add README with case study and decisions
	‚Ä¢	Keep commit messages conventional (feat:, fix:, docs:, chore:, etc.).
	‚Ä¢	Each commit should be self-contained and reviewable.
	‚Ä¢	If unsure, prefer fewer, clearer commits over many micro commits.